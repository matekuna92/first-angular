https://cli.angular.io -> A command line interface for Angular -> enable using cmd commands for angular
Github set remote origin + install angular-cli-ghpages --> https://dzone.com/articles/how-to-deploy-an-angular-application-to-github || https://medium.com/@swarnakishore/deploying-angular-cli-project-to-github-pages-db49246598a1

--- INSTALL ---

1. GitHub new repo -> clone lokális gépen -> cd mappa -> ezután install a cli-t

npm install -g @angular/cli
ng new my-dream-app
cd my-dream-app
ng serve -> futtatás -> browser-ben már működik is az app ( ha npm start-ot írok véletlenül, automatikusan átírja ng serve-re és így is működik )


ng -v : verzió ellenőrzése

Angular template-ek

Direktívák: meglévő HTML elemeket tudunk kibővíteni ( úgy használandók, mint pl form inputnál a REQUIRED utasítás a html elemben ). 
MVC-ben "service"-nek a komponens Class felel meg
Komponens template-jében a komponensben definiált változókat tudom használni

app.component.ts -> selector: 'name' -> ez a név fog megjelenni HTML elemként az oldal forrásában, ebbe kerül a teljes app
Az index.html mellett több JS file érkezik betöltéskor, így a böngésző állítja elő a nézetet, a szerver csak az adatokat biztosítja ( ezért nem látszódnak az oldal forrásban a megírt elemek )

Single Page Application fogalma ( a fenti mondat kb. ezt írta le ) 
Skálázhatóság: erőforrás kiszervezhető a user gépére, így elegendő kisebb szerver is

https://update.angular.io/ - leírás verziólépéshez

constructor - a komponens létrejöttekor minden alkalommal lefut

array filter, reduce, map, foreach átnézni!!!!! 

--- ANGULAR FOLYAMAT ---

1. AngularCLI.json file-ban van megadva az app kezdőpontja: main.ts és index.html
2. main.ts file-ban az AppModule class-t találjuk, a ts-ből ugrunk az app.module.ts-re, ott pedig megtalálható az AppComponent komponens -> app.component.ts -re megyünk
3. index.html-ben az app-root komponenst az app.component.ts -ben találjuk meg. A rendszer tudja, hogy a HTML-ben található app-root komponenst az app.component.ts -ben találat meg selectorként, ezért tudja megjeleníteni az itt lévő constructor-ban lévő függvényeket !

Typescript az ES6-ot bővíti ki pl. típusossággal

ng serve - 3 funkcionalitásból tevődik össze : elindít egy fordítást, figyelést, és ha valami változott, akkor újrafordít, és elindít és kiszolgálást(webszervert hoz létre)

ng build - 
ng build --prod - production módban szigorúbban figyelmeztet az angular pl. nem használt változókra, amik fejlesztő
módban még elfogadhatók... kisebbek lesznek a fájl méretek is production módban

Angular kiélesítés - DIST mappa tartalmát kell kimásolni ?
Dist mappában lévő index.html-ben már szerepelnek a generált .js fájlok script src-ben (ng build generálja...), ez mozgatható egyik pontból a másikba szerveren

Hogyan lesz a Typescript-ből JS, amit már ért a böngésző? .ts -> .js

TSC fordító: TypeScript Compliler - ts nyelvi elemekkel rendelkező fájlból JS fájlt csinál
tsc parancs: a tsconfig.ts alapján lefut a fordítás -> tsconfig.json fájlban az outDir adja meg melyik mappába fordítja (dist/out-tsc jelenleg), létrejön a dist/out-tsc mappa

out-tsc/app mappában pedig látható az app.component.js javascript fájl, ez tartalmazza az app.component.ts fájlt js-re lefordítva

Environment mappa: a 2 fájl tartalmazza az environment változót, ha --prod-dal build-elünk, akkor production: true, egyébként false --> MAIN.TS fájlban vizsgálom milyen módban vagyok: 

if (environment.production) {
  enableProdMode();
}


--- BOOTSTRAP INTEGRÁLÁS ---

Bootstrap integrálás a projektbe: https://github.com/angular/angular-cli/wiki/stories-include-bootstrap  ( új projektet hoztunk létre ehhez: https://github.com/matekuna92/ngBootstrap )

- A Bootstrap stílus csak ÚJRAINDÍTÁS UTÁN lép érvénybe... leállítás -> ng serve ismét

angular.json "styles" tömbjében definiált fájlok injektálódnak be a HTML-be, mintha <link rel> vagy <script src> -ként írnánk be a HTML-be


--- ANGULAR FLOW ---

angular.json -> meg vannak adva az alkalmazás kezdőpontjai : 
- index.html
- main.ts

az angular.json-ből átmegyünk az index.html-re, ahol az <app-root> komponens van használva, mivel ez nem tikipus HTML elem, ezt nem ismeri közvetlenül az angular sem
main.ts -> bootstrapModule-ban található egy AppModule -> ebből megnyitva az 
app.module.ts -t itt található a bootstrap property-ben egy [AppComponent] érték -->
app.component.ts -> a selector-ban van megadva az app-root, ezt találja meg az angular, így tudja értelmezni az index.html-ben lévő <app-root> kifejezést -->
app.component.html -> a tényleges HTML, amit megjelenítünk

--- GIT ---
git remote add origin URL - lokális git-et összeköti a szerveren lévő távoli git-tel. Ezután push-olható a lokális változtatás a távoli git repo-ba


ng-bootsrap VS ngx-bootsrap: ng CSAK bootstrap V4, ngx: V3-mal is kompatibilitis

--- KOMPONENS LÉTREHOZÁSA ---

Új projektben: ng generate component basicComponent
Rövid alakja: ng g c basicComponent

Új komponense generálása: 

ng generate component componentName -> 4 fájl létrejön + az app.module.ts update-elődik az új komponens nevével

app.module.ts - tartalmazza a komponenseket, paraméterei:

@NgModule - ezzel adjuk meg, hogy egy modulról beszélünk
declarations - milyen komponenseket definiál
imports - milyen más modult importál
providers - milyen szolgáltatásokat ad a külvilágnak
bootstrap - melyik komponenst indítja el legelsőnek ( AppComponent-et default )

export class AppModule - AppModule nevű typescript classként exportáljuk

Az újonnan létrehozott komponens csak akkor látszódik, ha hivatkozunk is rá ! Attól, hogy létre van hozva a komponens, a HTML tartlalma
nem látszódik default, mivel nincs sehol meghívva --> meg kell hívni <app-componentName> módon pl. az app.component.html-ben

a component.ts @Component részben inline módon is megadható a HTML a template ( templateURL helyett ), így akár 
törölhető a component HTML, CSS, így 1 mappában 1 TS fájl marad... --> nagyobb fájl esetén NEM érdemes így szervezni !!!

Ha kitörlöm a komponenshez tartozó valamennyi fájlt, de a hivatkozást bennehagyom valamelyik HTML-ben, akkor 
getSourceFile errort kapunk... mivel a hivatkozáshoz már nem tartozik komponens --> app.module.ts -ből is törölni kell
a fájlok törlése után! 


Konstruktor, template literal - komponens létrejöttekor mindig lefut a konstruktor

Komponens 2 részből áll: 
1. Dekorátor (@Component) - definiálja a komponenshez tartozó elemeket
2. typescript class, amit exportálunk majd

// dekorátor, függvényhívás, aminek a paramétereit állítjuk be (tömb) 
// dekorátor a component class-hoz fog tartozni, lefut a class előtt

import { Component } from '@angular/core';  // Component direktíva importálása

a kézzel létrehozott Komponenst ugyanúgy be kell írni az app.module.ts-be is, hogy ismerje az angular az elemet!

componentName.component.css --> a komponenshez tartozó stílusok csak a hozzátartozó component.html fájlban lévő elemekre
érvényesek... az <app-componentName></app-componentName> -en kívül megadott, ugyanolyan típusú elemekre nincs hatással

SASS-CSS <> Typescript-Javascript --> a SASS css-re fordul, a Typescript JS-re, emellett pedig plusz funkciókat adnak

-- DIREKTÍVÁK ---

*ngFor - struktúrális direktíva : megváltoztatja a HTML tartalmát az ő futásának eredményeképpen  
*ngFor, ngClass - https://angular.io/api/common/NgClass

-- EVENT BINDING --

DOM elem és a Typescript class között történik a kommunikáció
- minden JS event-et kiegészít az Angular, így az összes eddigi JS event elérhető Angularban, plusz dolgokkal

( IDE: ha egyszerű "event" kifejezést adunk meg parméterként, az IDE nem tudja milyen típusú eseményt várjon, így 
nem dobja fel az ajánlott opciókat. Azonban ha konkrétan megadjuk a típust ( pl: demo(evt: MouseEvent) ), ekkor már 
megjelennek javaslatként a MouseEvent-hez tartozó property-k (tulajdonságok) )

-- ATTRIBUTE BIND --

HTML elemek attribútumait [] szögletes zárójelben adjuk meg a html-ben -> megadható neki változó, ami a typescript classból jön

Legtöbbször egyirányú kötésről beszélünk, HTML-> component - () -, component -> HTML - {{}}, [] -, oda-vissza irány ( ha lehet, ritkán használjuk! ( 2 way data-binding ) PERFORMANCE ISSUE!!! ) : 
A HTML paraméter értékét hozzákötöm a belső osztályváltozó értékéhez - [ () ] : banana in the box a hivatalos elnevezése. Ez viszont nem létezik alapból,
egy külön modult kell beimportálni a használatához ( ngModul-on keresztül dolgozik a háttérben, ehhez viszont szükséges a FormsModule import a module.ts-ben )


2 féle form kezelés Angularban: 

1. template-driven - HTML-ből összerakom az oldalt, ezután kötjük hozzá a  HTML elemeket a typescript változóhoz
2. reaktív - formokat a kódból lehet felépíteni

Oda-vissza történik a komponensben és a HTML-ben történő módosítás, pl egy input mező esetében... megadom az értéket a komponensben, amit megjelenítek az 
<input> mezőben. Ha a mezőben a weboldalon törlök/hozzáadok, az a komponensben a megadott változó értékét is változtatja ( 2 way data-binding )

-- OSZTÁLYVÁLTOZÓK LÁTHATÓSÁGI KIJELÖLŐK --

public - 
private - 
protected - 

2 féle nyelvi irányzat: 
- szigorú típusosság - mindig mindennek 1 féle típusa van. Ha egy változó string típusú, akkor kizárólag stringet tudok megadni a változó értékének
- dinamikus típusosság (javascript) - a változó mindig olyan típust vesz fel, amilyen típusú értéket adok meg neki (szám, string)

-- PIPE-OK HASZNÁLATA --

Pipe: változó értékét módosíthatjuk, a kifejezés bal oldalát átalakítja a jobb oldalon megadottak szerint, miközben a 
változó értéke nem változik    {{ változó | feltétel }} pl. {{ title | uppercase }}

JSON PIPE: json formátumban térnek vissza az alapértelmezetten [Object Object]-ként megjelenő elemek

-- RESPONSIVE MENU - NGX-BOOTSTRAP --

 - install ngx-bootstrap collapse component(ha még nincs), app.module.ts-ben be kell húzni a CollapseModule-t az ngx-bootsrap csomagból + a button-re megadni a doksiban található click eseményt --> https://valor-software.com/ngx-bootstrap/#/collapse

-- ADD, EDIT, DELETE, műveletek <ul> lista elemeivel --

Osztályváltozó esetén a public a default, amit nem kell külön kiírni 
Adatleíró modell osztály: export class classModel { id: number; name: string; } - interface is használható ( class VS interface ! ) -->
majd a komponens osztályban definiálhatunk pl. egy tömböt, ami a classModel-ben megadott adatszerkezetű elemeket vár a tömb elemeiként.
Tehát a tömb olyan objektumokat fog tartalmazni, amely mindegyikének lesz egy id és egy name property-je, tulajdonsága.

...
Delete function esetén: nem elég teljes object-et átadni, így nincs szükség ID-ra? DeepClone, referencia, stb. utánanézeni JS-ben ! Hogyan tudunk szólni
az ngFor-nak, hogy itt változás történt? 
...


-- img src-nek nem adható meg HTTP link (pl komponensben képeket adunk meg property-ként http linkekkel : 
ERR_UNKNOWN_URL_SCHEME error --> nem adtuk meg az angularnak, hogy a http biztonságos, és használhatja ->
XSS ellen véd az angular alapértelmezetten --> 
<img src=" {{ evt.picture }} helyett közvetlenül az src attribútumnak kell megadni a képet 
<img [src] = "evt.picture"

Immutability - adatot nem módosítunk, sosem az eredeti tömböt módosítjuk, hanem létrehozunk egy új példányt belőle,
és azzal dolgozunk!
Spread operator - szétbontja a tömböt elemekre, így pl. egy utasítással beszúrható az összes elem ...arr módon
másik tömbbe, objektumként, vagy paraméterként is

Best Practise: az EventModel-t kigeneráljuk külön class-ként, és itt írjuk meg a változókat és a konstruktort,
nem a listDemo ts-ben!

saját pipe generálása : ng g pipe folder/pipeName

implements: interfész implementálása az adott osztályban


GIT lokális változások eldobása : git reset --hard -> minden lokális változtatás eldobva
git log -1 -> meg tudom nézni, hogy melyik az a commit, amin éppen állok
git pull origin master --> frissíteni a remote repo alapján 

angular.json --> prefix property tetszőlegesen átírható "app" helyett bármi másra --> ezt a prefix-et használjuk HTMLben a komponensek előtt (app-root, app-event, stb.)

Angularban HREF-ek helyett RouterLink-eket használunk ! - https://angular.io/guide/router

Route létrehozása : component neve + - routing fájl elnevezés --> app.component -> app-routing.ts

Route létrehozása után a component HTML-ben az ' "<a href="index.html" ' helyett már az ' <a routerLink="/home"> ' kifejezést használjuk! - Különben mikor visszamegyünk a kezdőoldalra,
akkor is ott marad a 404-es oldal tartalma!

<router-outlet> --> a weboldal "cserélhető" része -> az app-routing alapján dönti el az angular, milyen tartalom (melyik komponens) jelenjen meg
a router-outlet-ben ebben a részben, amiket a routingban a "path:" részeknél adtunk meg 


























     

